---
description: 
globs: 
alwaysApply: false
---
# Python and Jupyter Notebook Development Guide

## Project Structure
- Python source files should be in the `src/` directory
- Jupyter notebooks should be in the `notebooks/` directory
- Tests should be in the `tests/` directory
- Configuration files should be in the root directory

## Code Style
- Follow PEP 8 style guide for Python code
- Use type hints where appropriate
- Keep functions focused and single-purpose
- Document functions and classes with docstrings

## Jupyter Notebook Best Practices
- Keep notebooks focused on a single topic
- Use markdown cells for documentation
- Clear output before committing
- Use code cells for executable code
- Consider using `nbformat` for notebook versioning

## Dependencies
- Use `requirements.txt` for pip dependencies
- Use `environment.yml` for conda environments
- Pin dependency versions for reproducibility

## Testing
- Write unit tests using `pytest`
- Use `pytest-notebook` for testing notebooks
- Aim for high test coverage

## Version Control
- Use meaningful commit messages
- Keep commits focused and atomic
- Review notebook outputs before committing

## Development Workflow
1. Create a new branch for features/fixes
2. Write tests first (TDD approach)
3. Implement the feature/fix
4. Run tests and linting
5. Create a pull request
6. Get code review
7. Merge after approval

## Common Commands
```bash
# Create and activate virtual environment
python -m venv venv
source venv/bin/activate  # On Unix/macOS
.\venv\Scripts\activate   # On Windows

# Install dependencies
pip install -r requirements.txt

# Run tests
pytest

# Run linting
flake8
black .
isort .

# Start Jupyter
jupyter notebook
```

## File Organization
- `src/`: Python source code
- `notebooks/`: Jupyter notebooks
- `tests/`: Test files
- `data/`: Data files
- `docs/`: Documentation
- `requirements.txt`: Python dependencies
- `environment.yml`: Conda environment
- `setup.py`: Package configuration
- `README.md`: Project documentation
